(()=>{"use strict";const t=function(t){let e=document.createElement(t.tag);if("attr"in t){let a=t.attr;for(let[t,i]of Object.entries(a))e.setAttribute(t,i)}return null!=t.classList&&e.classList.add(...t.classList),"text"in t&&(e.textContent=t.text),e},e=function(){const i=Object.keys(localStorage).reverse(),s=document.querySelector(".project-items");let n=document.querySelector(".selected");n=null===n||"Home"===n.id?"":n.textContent,s.innerHTML="",i.forEach((a=>{if("Home"===a)return;let i=t({tag:"div",classList:["project-item"]}),r=t({tag:"i",classList:["fa","fa-times","sm","remove-p-item"]}),o=t({tag:"div",classList:["project-name"],text:a});n===a&&o.classList.add("selected"),r.addEventListener("click",(t=>{localStorage.removeItem(a);let i=document.querySelector(".selected");i=i.textContent,i===a&&(document.querySelector(".main-container").innerHTML=""),e()})),i.append(o,r),s.appendChild(i)})),a()},a=function(){const e=document.querySelector("#projects"),a=document.querySelectorAll(".project-name"),n=document.querySelector("#home");n.addEventListener("click",i.bind(null,n)),a.forEach((t=>{t.addEventListener("click",i.bind(null,t))})),e.addEventListener("click",(e=>{document.querySelector(".overlay")||(container.appendChild(function(){const e=t({tag:"div",classList:["p-form-buttons"]}),a=t({tag:"button",text:"Cancel",classList:["cancel-btn"]});a.addEventListener("click",(t=>{document.querySelector(".overlay").remove()})),e.append(a,t({tag:"button",text:"Okay",classList:["submit-btn"]}));const i=t({tag:"div",classList:["project-form"]});i.append(t({tag:"div",text:"Create New Project",classList:["p-form-heading"]}),t({tag:"input",attr:{type:"text",placeholder:"Project Name"},classList:["p-form-text"]}),e);let s=t({tag:"div",classList:["overlay"]});return s.append(i),s}()),s())}))},i=function(t,e){let a=document.querySelector(".selected");t!==a&&(null!=a&&a.classList.remove("selected"),t.classList.add("selected"),"home"===t.id?r("Home"):r(t.textContent))},s=function(){document.querySelector(".submit-btn").addEventListener("click",n)};function n(t){let a=document.querySelector(".p-form-text").value;a=a.charAt(0).toUpperCase()+a.slice(1),""!==a?a.length>12?alert("Value too big"):(document.querySelector(".overlay").remove(),null===localStorage.getItem(a)?(localStorage.setItem(a,JSON.stringify([])),e()):alert("Project already exists.")):alert("Please enter a value")}const r=function(e){const a=document.querySelector(".main-container");let i=JSON.parse(localStorage.getItem(e));if(null===i)return void alert("Page does not exist.");a.innerHTML="";let s=t({tag:"div",classList:["header"]}),n=t({tag:"div",classList:["main-heading"],text:e}),r=t({tag:"button",text:"New Task",classList:["new-task-btn"]});r.addEventListener("click",c),s.append(n,r),a.appendChild(s),o(i,a)},o=function(e,a){let i=[];e.forEach((t=>{i.push(new d(t.title,t.description,t.dueDate,t.priority))})),a.appendChild(function(e){let a=t({tag:"div",class:"tasks-container"}),i="";return e.forEach((t=>{let e=t.priority,a="";a="low"===e?"task-blue":"medium"===e?"task-yellow":"task-red";const s=`<div class="${a} task">\n                        <div class="task-title">${t.title}</div>\n                        <div class="task-due-date">${t.dueDate}</div>\n                        <i class="fa fa-times sm"></i>\n                    </div>\n                    <div class="hidden">\n                        <div class="task-description">Details: ${t.description}</div>\n                        <div class="task-priority">Priority: ${t.priority}</div>\n                        <button class="edit-task">Edit Details</button>\n                    </div>`;i+=s})),a.innerHTML=i,a}(i)),l()},l=function(){var t,e=document.getElementsByClassName("task");for(t=0;t<e.length;t++)e[t].addEventListener("click",(function(){this.classList.toggle("active");var t=this.nextElementSibling;"block"===t.style.display?t.style.display="none":t.style.display="block"}))},c=function(){container.appendChild(function(){const e=t({tag:"div",classList:["t-form-buttons"]}),a=t({tag:"button",text:"Cancel",classList:["cancel-btn","b"]});a.addEventListener("click",(t=>{document.querySelector(".overlay").remove()})),e.append(a,t({tag:"button",text:"Create",attr:{for:"task-form"},classList:["t-submit-btn","b"]}));const i=t({tag:"div",classList:["task-form"]}),s=t({tag:"label",text:"Title:"});s.append(t({tag:"input",attr:{type:"text",required:"",name:"title"},classList:["t-title"]}));const n=t({tag:"label",text:"Description:"});n.append(t({tag:"textarea",attr:{rows:"4",name:"description"},classList:["t-description"]}));const r=t({tag:"label",classList:["m"]});r.innerHTML='Priority:\n   <input id="low" type="radio" name="priority" value="low" checked>\n   <label class="r" for="low">Low</label>\n   <input id="medium" type="radio" name="priority" value="medium">\n   <label class="r" for="medium">Medium</label>\n   <input id="high" type="radio" name="priority" value="high">\n   <label class="r" for="high">High</label>';const o=t({tag:"label",text:"Due Date:",classList:["m"]});o.append(t({tag:"input",attr:{type:"date",required:"",name:"dueDate"}}));const l=t({tag:"form",classList:["t-content"],attr:{id:"task-form",action:" ",method:"post"}});l.append(s,n,r,o,e),i.append(t({tag:"div",text:"Create a new task:",classList:["t-form-heading"]}),l);let c=t({tag:"div",classList:["overlay"]});return c.append(i),c}()),document.querySelector(".t-content").addEventListener("submit",(t=>{t.preventDefault(),document.querySelector(".overlay").remove();let e=document.querySelector(".selected");e="Home"===e.id?"Home":e.textContent;const a=localStorage.getItem(e),i=Object.fromEntries(new FormData(t.target).entries());if(null===a)return void alert("Project does not exist.");let s=JSON.parse(a);s.push(i),localStorage.setItem(e,JSON.stringify(s)),r(e)}))};class d{constructor(t,e,a,i){this.title=t,this.description=e,this.dueDate=a,this.priority=i}get title(){return this._title}set title(t){this._title=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get priority(){return this._priority}set priority(t){this._priority=t}}const u=function(){let e=t({tag:"div",classList:["nav-bar"]});return e.append(t({tag:"i",classList:["fa","fa-tasks","fa-3x"],attr:{"aria-hidden":"true"}}),t({tag:"div",classList:["nav-heading"],text:"To-Do"}),t({tag:"div",classList:["nav-side"],text:"Tasks and Notes"})),e},m=function(){let e=t({tag:"div",classList:["side-bar"]});return e.append(p("home","Home"),p("briefcase","Projects")),e},p=function(e,a){let i=t({tag:"div",attr:{id:a.toLowerCase()},classList:["side-item"]});if(i.append(t({tag:"i",classList:["fa",`fa-${e}`],attr:{"aria-hidden":"true"}}),t({tag:"span",text:a})),"Projects"===a){let e=t({tag:"div"});return e.append(i,t({tag:"div",classList:["project-items"]})),e}return i};!function(){const a=document.querySelector("#container");[u(),m(),t({tag:"div",classList:["main-container"]})].forEach((t=>{a.appendChild(t)})),document.querySelector("#home").classList.add("selected"),null===localStorage.getItem("Home")&&localStorage.setItem("Home",JSON.stringify([])),e(),r("Home")}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,